# .github/workflows/release.yml
# Generated by cargo-dist, manually extended for audio/tool‑chain deps

name: Release

permissions:
  contents: write

###############################################################################
#  Global build flags — make espeak build itself everywhere and avoid the
#  static‑only pkg‑config probe that breaks cross targets
###############################################################################
env:
  ESPEAK_BUILD_SHARED_LIBS: "1"
  PKG_CONFIG_ALL_STATIC: "0"

on:
  pull_request:
  push:
    tags:
      - "**[0-9]+.[0-9]+.[0-9]+*"
###############################################################################
# 1. PLAN ──────────────────────────────────────────────────────────────────────
###############################################################################
jobs:
  plan:
    runs-on: ubuntu-latest
    outputs:
      val: ${{ steps.plan.outputs.manifest }}
      tag: ${{ !github.event.pull_request && github.ref_name || '' }}
      tag-flag: ${{ !github.event.pull_request && format('--tag={0}', github.ref_name) || '' }}
      publishing: ${{ !github.event.pull_request }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with: { submodules: recursive }

      - name: Install cargo-dist
        shell: bash
        run: |
          curl --proto '=https' --tlsv1.2 -LsSf \
               https://github.com/axodotdev/cargo-dist/releases/download/v0.28.0/cargo-dist-installer.sh | sh

      - name: Cache dist binary
        uses: actions/upload-artifact@v4
        with:
          name: cargo-dist-cache
          path: ~/.cargo/bin/dist

      - id: plan
        run: |
          dist plan --output-format=json > plan-dist-manifest.json
          echo "manifest=$(jq -c . plan-dist-manifest.json)" >> "$GITHUB_OUTPUT"

      - uses: actions/upload-artifact@v4
        with:
          name: artifacts-plan-dist-manifest
          path: plan-dist-manifest.json

  ###############################################################################
  # 2. BUILD LOCAL ARTIFACTS (one runner per target set) ────────────────────────
  ###############################################################################
  build-local-artifacts:
    name: build-local-artifacts (${{ join(matrix.targets, ', ') }})
    needs: plan
    if:
      ${{ fromJson(needs.plan.outputs.val).ci.github.artifacts_matrix.include != null &&
      (needs.plan.outputs.publishing == 'true' ||
      fromJson(needs.plan.outputs.val).ci.github.pr_run_mode == 'upload') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.plan.outputs.val).ci.github.artifacts_matrix }}
    runs-on: ${{ matrix.runner }}
    container: ${{ matrix.container && matrix.container.image || null }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BUILD_MANIFEST_NAME: target/distrib/${{ join(matrix.targets, '-') }}-dist-manifest.json
    steps:
      - name: enable windows longpaths
        run: git config --global core.longpaths true

      - uses: actions/checkout@v4
        with: { submodules: recursive }

      - name: Install Rust non-interactively (container runners)
        if: ${{ matrix.container }}
        run: |
          if ! command -v cargo >/dev/null; then
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"
          fi

      - name: Install cargo-dist
        run: ${{ matrix.install_dist.run }}

      # -----------------------------------------------------------------------
      # OS-specific native deps for audio crates
      # -----------------------------------------------------------------------
      - name: Install system deps (Ubuntu)
        if: contains(matrix.runner, 'ubuntu')
        shell: bash
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            build-essential pkg-config libasound2-dev libmp3lame-dev \
            autoconf automake libtool gettext

      - name: Install system deps (macOS)
        if: contains(matrix.runner, 'macos')
        shell: bash
        run: |
          brew install pkg-config lame espeak-ng

      # Windows needs nothing extra – espeak-ng is built from source

      # -----------------------------------------------------------------------
      # Build & package
      # -----------------------------------------------------------------------
      - name: Build artifacts
        run: |
          dist build ${{ needs.plan.outputs.tag-flag }} \
              --print=linkage --output-format=json \
              ${{ matrix.dist_args }} > dist-manifest.json

      - id: cargo-dist
        shell: bash
        run: |
          echo "paths<<EOF" >> "$GITHUB_OUTPUT"
          dist print-upload-files-from-manifest \
               --manifest dist-manifest.json >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          cp dist-manifest.json "$BUILD_MANIFEST_NAME"

      - uses: actions/upload-artifact@v4
        with:
          name: artifacts-build-local-${{ join(matrix.targets, '_') }}
          path: |
            ${{ steps.cargo-dist.outputs.paths }}
            ${{ env.BUILD_MANIFEST_NAME }}

  ###############################################################################
  # 3. BUILD GLOBAL ARTIFACTS (checksums, installers, …) ────────────────────────
  ###############################################################################
  build-global-artifacts:
    needs: [plan, build-local-artifacts]
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BUILD_MANIFEST_NAME: target/distrib/global-dist-manifest.json
    steps:
      - uses: actions/checkout@v4
        with: { submodules: recursive }

      - uses: actions/download-artifact@v4
        with:
          name: cargo-dist-cache
          path: ~/.cargo/bin/
      - run: chmod +x ~/.cargo/bin/dist

      - uses: actions/download-artifact@v4
        with:
          pattern: artifacts-*
          path: target/distrib/
          merge-multiple: true

      - id: cargo-dist
        shell: bash
        run: |
          dist build ${{ needs.plan.outputs.tag-flag }} \
               --output-format=json --artifacts=global > dist-manifest.json
          echo "paths<<EOF" >> "$GITHUB_OUTPUT"
          jq -r '.upload_files[]' dist-manifest.json >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          cp dist-manifest.json "$BUILD_MANIFEST_NAME"

      - uses: actions/upload-artifact@v4
        with:
          name: artifacts-build-global
          path: |
            ${{ steps.cargo-dist.outputs.paths }}
            ${{ env.BUILD_MANIFEST_NAME }}

  ###############################################################################
  # 4. HOST (upload to GitHub Release) ──────────────────────────────────────────
  ###############################################################################
  host:
    needs: [plan, build-local-artifacts, build-global-artifacts]
    if: ${{ always() && needs.plan.outputs.publishing == 'true' &&
      (needs.build-global-artifacts.result == 'skipped' ||
      needs.build-global-artifacts.result == 'success') &&
      (needs.build-local-artifacts.result == 'skipped' ||
      needs.build-local-artifacts.result == 'success') }}
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      val: ${{ steps.host.outputs.manifest }}
    steps:
      - uses: actions/checkout@v4
        with: { submodules: recursive }

      - uses: actions/download-artifact@v4
        with:
          name: cargo-dist-cache
          path: ~/.cargo/bin/
      - run: chmod +x ~/.cargo/bin/dist

      - uses: actions/download-artifact@v4
        with:
          pattern: artifacts-*
          path: target/distrib/
          merge-multiple: true

      - id: host
        shell: bash
        run: |
          dist host ${{ needs.plan.outputs.tag-flag }} \
               --steps=upload --steps=release \
               --output-format=json > dist-manifest.json
          echo "manifest=$(jq -c . dist-manifest.json)" >> "$GITHUB_OUTPUT"

      - uses: actions/upload-artifact@v4
        with:
          name: artifacts-dist-man
