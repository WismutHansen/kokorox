name: build-and-release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    strategy:
      matrix:
        include:
          # ---------- Linux ----------
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            feature: cpu
            cargo_flags: "" # default = ["cpu"]
            archive: tar.gz

          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            feature: cuda
            cargo_flags: "--no-default-features --features cuda"
            archive: tar.gz

          # ---------- macOS ----------
          - os: macos-15
            target: x86_64-apple-darwin
            feature: cpu
            cargo_flags: ""
            archive: tar.gz

          - os: macos-15
            target: x86_64-apple-darwin
            feature: coreml
            cargo_flags: "--no-default-features --features coreml"
            archive: tar.gz

          # ---------- Windows ----------
          - os: windows-2025
            target: x86_64-pc-windows-msvc
            feature: cpu
            cargo_flags: ""
            archive: zip

          - os: windows-2025
            target: x86_64-pc-windows-msvc
            feature: cuda
            cargo_flags: "--no-default-features --features cuda"
            archive: zip
    runs-on: ${{ matrix.os }}
    env:
      BIN_NAME: koko
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # ------- (optional) speed boost -------
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.feature }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # ------- CUDA SDK only when needed ----
      - name: Install CUDA Toolkit
        if: matrix.feature == 'cuda'
        uses: Jimver/cuda-toolkit@v0.3.0 # installs CUDA 12 by default

      # ------- build ------------------------
      - name: Build ${{ matrix.feature }}
        run: cargo build --release --target ${{ matrix.target }} ${{ matrix.cargo_flags }}

      # ------- package ----------------------
      - name: Package
        shell: bash
        run: |
          set -e
          OUT=dist/${{ matrix.target }}/${{ matrix.feature }}
          mkdir -p "$OUT"
          cp target/${{ matrix.target }}/release/${BIN_NAME}* "$OUT/"
          cd dist
          ARCHIVE=${BIN_NAME}-${{ matrix.target }}-${{ matrix.feature }}.${{ matrix.archive }}
          if [[ "${{ matrix.archive }}" == "zip" ]]; then
            7z a "../$ARCHIVE" "${{ matrix.target }}/${{ matrix.feature }}"/*
          else
            tar -czf "../$ARCHIVE" "${{ matrix.target }}/${{ matrix.feature }}"
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-${{ matrix.feature }}
          path: |
            *.zip
            *.tar.gz

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: "**/*.{zip,tar.gz}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
